[
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11452",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11452/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11452/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11452/events",
        "html_url": "https://github.com/facebook/react/pull/11452",
        "id": 271166018,
        "number": 11452,
        "title": "Validate built bundles exists",
        "user": {
            "login": "misoguy",
            "id": 12230408,
            "avatar_url": "https://avatars0.githubusercontent.com/u/12230408?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/misoguy",
            "html_url": "https://github.com/misoguy",
            "followers_url": "https://api.github.com/users/misoguy/followers",
            "following_url": "https://api.github.com/users/misoguy/following{/other_user}",
            "gists_url": "https://api.github.com/users/misoguy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/misoguy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/misoguy/subscriptions",
            "organizations_url": "https://api.github.com/users/misoguy/orgs",
            "repos_url": "https://api.github.com/users/misoguy/repos",
            "events_url": "https://api.github.com/users/misoguy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/misoguy/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 196858374,
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-11-04T04:34:44Z",
        "updated_at": "2017-11-04T04:34:49Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/11452",
            "html_url": "https://github.com/facebook/react/pull/11452",
            "diff_url": "https://github.com/facebook/react/pull/11452.diff",
            "patch_url": "https://github.com/facebook/react/pull/11452.patch"
        },
        "body": "Fix #11443 "
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11451",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11451/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11451/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11451/events",
        "html_url": "https://github.com/facebook/react/pull/11451",
        "id": 271162150,
        "number": 11451,
        "title": "Add more SSR fixture cases per #9866",
        "user": {
            "login": "sw-yx",
            "id": 6764957,
            "avatar_url": "https://avatars1.githubusercontent.com/u/6764957?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sw-yx",
            "html_url": "https://github.com/sw-yx",
            "followers_url": "https://api.github.com/users/sw-yx/followers",
            "following_url": "https://api.github.com/users/sw-yx/following{/other_user}",
            "gists_url": "https://api.github.com/users/sw-yx/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sw-yx/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sw-yx/subscriptions",
            "organizations_url": "https://api.github.com/users/sw-yx/orgs",
            "repos_url": "https://api.github.com/users/sw-yx/repos",
            "events_url": "https://api.github.com/users/sw-yx/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sw-yx/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 196858374,
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-11-04T03:09:16Z",
        "updated_at": "2017-11-04T03:11:30Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/11451",
            "html_url": "https://github.com/facebook/react/pull/11451",
            "diff_url": "https://github.com/facebook/react/pull/11451.diff",
            "patch_url": "https://github.com/facebook/react/pull/11451.patch"
        },
        "body": "Making an initial pull request to address Sebastian's comment on:\r\n\r\n><input />, <select />, <option /> and <textarea /> controlled and uncontrolled. All types of inputs, including dates, numbers etc.\r\n\r\nThis is more about confirming that I understand what is meant by controlled/uncontrolled and I will fill out the rest once that is confirmed"
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11450",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11450/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11450/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11450/events",
        "html_url": "https://github.com/facebook/react/issues/11450",
        "id": 271158972,
        "number": 11450,
        "title": "Investigate DCE regression",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "gaearon",
                "id": 810438,
                "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gaearon",
                "html_url": "https://github.com/gaearon",
                "followers_url": "https://api.github.com/users/gaearon/followers",
                "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
                "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
                "organizations_url": "https://api.github.com/users/gaearon/orgs",
                "repos_url": "https://api.github.com/users/gaearon/repos",
                "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gaearon/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-11-04T02:08:17Z",
        "updated_at": "2017-11-04T02:08:22Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Seems like we started bundling persistent reconciler in DOM bundles. Maybe this negated some effect from ES modules (even though they were a net win). Need to look into why this happened."
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11447",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11447/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11447/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11447/events",
        "html_url": "https://github.com/facebook/react/pull/11447",
        "id": 271128936,
        "number": 11447,
        "title": "make linc script cross platform",
        "user": {
            "login": "xjlim",
            "id": 10875678,
            "avatar_url": "https://avatars1.githubusercontent.com/u/10875678?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xjlim",
            "html_url": "https://github.com/xjlim",
            "followers_url": "https://api.github.com/users/xjlim/followers",
            "following_url": "https://api.github.com/users/xjlim/following{/other_user}",
            "gists_url": "https://api.github.com/users/xjlim/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xjlim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xjlim/subscriptions",
            "organizations_url": "https://api.github.com/users/xjlim/orgs",
            "repos_url": "https://api.github.com/users/xjlim/repos",
            "events_url": "https://api.github.com/users/xjlim/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xjlim/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 196858374,
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-11-03T21:54:00Z",
        "updated_at": "2017-11-04T01:04:22Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/11447",
            "html_url": "https://github.com/facebook/react/pull/11447",
            "diff_url": "https://github.com/facebook/react/pull/11447.diff",
            "patch_url": "https://github.com/facebook/react/pull/11447.patch"
        },
        "body": "Fix #11444"
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11446",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11446/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11446/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11446/events",
        "html_url": "https://github.com/facebook/react/pull/11446",
        "id": 271118726,
        "number": 11446,
        "title": "Fix `yarn linc` command on Windows",
        "user": {
            "login": "BreahnaDavid",
            "id": 11631898,
            "avatar_url": "https://avatars1.githubusercontent.com/u/11631898?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/BreahnaDavid",
            "html_url": "https://github.com/BreahnaDavid",
            "followers_url": "https://api.github.com/users/BreahnaDavid/followers",
            "following_url": "https://api.github.com/users/BreahnaDavid/following{/other_user}",
            "gists_url": "https://api.github.com/users/BreahnaDavid/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/BreahnaDavid/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/BreahnaDavid/subscriptions",
            "organizations_url": "https://api.github.com/users/BreahnaDavid/orgs",
            "repos_url": "https://api.github.com/users/BreahnaDavid/repos",
            "events_url": "https://api.github.com/users/BreahnaDavid/events{/privacy}",
            "received_events_url": "https://api.github.com/users/BreahnaDavid/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 196858374,
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2017-11-03T21:06:01Z",
        "updated_at": "2017-11-03T22:37:26Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/11446",
            "html_url": "https://github.com/facebook/react/pull/11446",
            "diff_url": "https://github.com/facebook/react/pull/11446.diff",
            "patch_url": "https://github.com/facebook/react/pull/11446.patch"
        },
        "body": "this issue:\r\nhttps://github.com/facebook/react/issues/11444\r\n\r\nI just got the idea that we can match .js files without using grep in a second pipe,\r\nbut by passing directly to `git diff`"
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11445",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11445/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11445/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11445/events",
        "html_url": "https://github.com/facebook/react/pull/11445",
        "id": 271111975,
        "number": 11445,
        "title": "expose devtools hook with react-reconciler package",
        "user": {
            "login": "iamdustan",
            "id": 227879,
            "avatar_url": "https://avatars3.githubusercontent.com/u/227879?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iamdustan",
            "html_url": "https://github.com/iamdustan",
            "followers_url": "https://api.github.com/users/iamdustan/followers",
            "following_url": "https://api.github.com/users/iamdustan/following{/other_user}",
            "gists_url": "https://api.github.com/users/iamdustan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iamdustan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iamdustan/subscriptions",
            "organizations_url": "https://api.github.com/users/iamdustan/orgs",
            "repos_url": "https://api.github.com/users/iamdustan/repos",
            "events_url": "https://api.github.com/users/iamdustan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iamdustan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 196858374,
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2017-11-03T20:37:46Z",
        "updated_at": "2017-11-03T21:44:49Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/11445",
            "html_url": "https://github.com/facebook/react/pull/11445",
            "diff_url": "https://github.com/facebook/react/pull/11445.diff",
            "patch_url": "https://github.com/facebook/react/pull/11445.patch"
        },
        "body": "```\r\n[react] yarn build react-reconciler\r\nyarn run v1.2.1\r\n$ npm run version-check && node scripts/rollup/build.js react-reconciler\r\n\r\n> @16.1.0-beta version-check /Users/iamdustan/projects/react/react\r\n> node ./scripts/tasks/version-check.js\r\n\r\n BUILDING  react-reconciler.development.js (node_dev)\r\n COMPLETE  react-reconciler.development.js (node_dev)\r\n\r\n BUILDING  react-reconciler.production.min.js (node_prod)\r\n COMPLETE  react-reconciler.production.min.js (node_prod)\r\n\r\n BUILDING  react-reconciler-devtools.development.js (node_dev)\r\n COMPLETE  react-reconciler-devtools.development.js (node_dev)\r\n\r\n BUILDING  react-reconciler-devtools.production.min.js (node_prod)\r\n COMPLETE  react-reconciler-devtools.production.min.js (node_prod)\r\n\r\n┌─────────────────────────────────────────────────────────┬───────────┬──────────────┬─────────────┬───────────┬──────────────┬─────────────┐\r\n│ Bundle                                                  │ Prev Size │ Current Size │ Diff        │ Prev Gzip │ Current Gzip │ Diff        │\r\n├─────────────────────────────────────────────────────────┼───────────┼──────────────┼─────────────┼───────────┼──────────────┼─────────────┤\r\n│ react-reconciler.development.js (NODE_DEV)              │ 258.73 KB │ 258.73 KB    │ 0 %         │ 53.2 KB   │ 53.2 KB      │ 0 %         │\r\n├─────────────────────────────────────────────────────────┼───────────┼──────────────┼─────────────┼───────────┼──────────────┼─────────────┤\r\n│ react-reconciler.production.min.js (NODE_PROD)          │ 39.63 KB  │ 39.63 KB     │ 0 %         │ 12.32 KB  │ 12.32 KB     │ 0 %         │\r\n├─────────────────────────────────────────────────────────┼───────────┼──────────────┼─────────────┼───────────┼──────────────┼─────────────┤\r\n│ react-reconciler-devtools.development.js (NODE_DEV)     │ 0 B       │ 2.83 KB      │ +Infinity % │ 0 B       │ 1.05 KB      │ +Infinity % │\r\n├─────────────────────────────────────────────────────────┼───────────┼──────────────┼─────────────┼───────────┼──────────────┼─────────────┤\r\n│ react-reconciler-devtools.production.min.js (NODE_PROD) │ 0 B       │ 831 B        │ +Infinity % │ 0 B       │ 485 B        │ +Infinity % │\r\n└─────────────────────────────────────────────────────────┴───────────┴──────────────┴─────────────┴───────────┴──────────────┴─────────────┘\r\n```\r\n\r\nwas working on updating a renderer to the official API and realized I had lost access to this. I _think_ should be relatively noncontroversial and safe. The `ReactDevtoolsHook` file has only one real import from `fbjs/lib/warning` and hten the type imports from `ReactFiber` and `ReactFiberRoot`.\r\n\r\ncc @gaearon @bvaughn "
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11444",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11444/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11444/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11444/events",
        "html_url": "https://github.com/facebook/react/issues/11444",
        "id": 271076113,
        "number": 11444,
        "title": "Fix `yarn linc` command on Windows",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            },
            {
                "id": 588833528,
                "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
                "name": "Difficulty: medium",
                "color": "fbca04",
                "default": false
            },
            {
                "id": 725156255,
                "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
                "name": "good first issue (taken)",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-11-03T18:33:45Z",
        "updated_at": "2017-11-03T21:42:30Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "It currently fails on Windows because it depends on grep:\r\n\r\nhttps://github.com/facebook/react/blob/61d35ce1f3f9c0706ed3630a2650d578497ae8c2/package.json#L101\r\n\r\nWe should find a way to make it do the same in a cross platform way (e.g. from a Node script)."
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11443",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11443/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11443/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11443/events",
        "html_url": "https://github.com/facebook/react/issues/11443",
        "id": 271071294,
        "number": 11443,
        "title": "Ensure linted bundles exist",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 71502270,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
                "name": "Component: Build Infrastructure",
                "color": "f9d0c4",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2017-11-03T18:17:10Z",
        "updated_at": "2017-11-04T04:36:00Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "I added validation of built bundles in https://github.com/facebook/react/pull/11432.\r\n\r\nHowever I actually messed it up, and ESLint wasn't running on any files because of invalid arguments. I fixed that here: https://github.com/facebook/react/commit/61d35ce1f3f9c0706ed3630a2650d578497ae8c2#diff-edcddc0e0143d5a5a93d0951fd599794\r\n\r\nWe should fail the build if the glob patterns it's searching for don't exist."
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11424",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11424/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11424/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11424/events",
        "html_url": "https://github.com/facebook/react/pull/11424",
        "id": 270320484,
        "number": 11424,
        "title": "Support string values for capture attribute.",
        "user": {
            "login": "maxschmeling",
            "id": 112691,
            "avatar_url": "https://avatars1.githubusercontent.com/u/112691?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxschmeling",
            "html_url": "https://github.com/maxschmeling",
            "followers_url": "https://api.github.com/users/maxschmeling/followers",
            "following_url": "https://api.github.com/users/maxschmeling/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxschmeling/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxschmeling/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxschmeling/subscriptions",
            "organizations_url": "https://api.github.com/users/maxschmeling/orgs",
            "repos_url": "https://api.github.com/users/maxschmeling/repos",
            "events_url": "https://api.github.com/users/maxschmeling/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxschmeling/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 196858374,
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-11-01T14:10:00Z",
        "updated_at": "2017-11-01T14:21:44Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/11424",
            "html_url": "https://github.com/facebook/react/pull/11424",
            "diff_url": "https://github.com/facebook/react/pull/11424.diff",
            "patch_url": "https://github.com/facebook/react/pull/11424.patch"
        },
        "body": "  * Uses HAS_OVERLOADED_BOOLEAN_VALUE instead of HAS_BOOLEAN_VALUE\r\n  * Allows for ```<input type=\"file\" capture=\"user\" />```\r\n\r\nFixes #11419 "
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11423",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11423/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11423/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11423/events",
        "html_url": "https://github.com/facebook/react/issues/11423",
        "id": 270314794,
        "number": 11423,
        "title": "Warn if <noscript> child is not a string",
        "user": {
            "login": "stephen-last",
            "id": 16349203,
            "avatar_url": "https://avatars1.githubusercontent.com/u/16349203?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stephen-last",
            "html_url": "https://github.com/stephen-last",
            "followers_url": "https://api.github.com/users/stephen-last/followers",
            "following_url": "https://api.github.com/users/stephen-last/following{/other_user}",
            "gists_url": "https://api.github.com/users/stephen-last/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stephen-last/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stephen-last/subscriptions",
            "organizations_url": "https://api.github.com/users/stephen-last/orgs",
            "repos_url": "https://api.github.com/users/stephen-last/repos",
            "events_url": "https://api.github.com/users/stephen-last/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stephen-last/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710332294,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
                "name": "Component: Server Rendering",
                "color": "d4c5f9",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 16,
        "created_at": "2017-11-01T13:51:13Z",
        "updated_at": "2017-11-03T17:10:13Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "React 16.0.0 with SSR & [lazysizes](https://github.com/aFarkas/lazysizes) 4.0.1.\r\n\r\nTrying to use the [\"the noscript pattern\"](https://github.com/aFarkas/lazysizes#the-noscript-pattern) to lazy load images with [lazysizes](https://github.com/aFarkas/lazysizes) but I'm seeing this:\r\n\r\n> Warning: Expected server HTML to contain a matching &lt;img&gt; in &lt;noscript&gt;.\r\n\r\nImage component render method:\r\n\r\n```js\r\nrender () {\r\n    const { cdn, url, width, height } = this.props\r\n\r\n    if (!url) return null\r\n\r\n    const noScriptImgProps = {\r\n      src: `${cdn}${url}`,\r\n      className: classNames('product-image'),\r\n      width,\r\n      height\r\n    }\r\n\r\n    const imgProps = {\r\n      'data-src': `${cdn}${url}`,\r\n      className: classNames('product-image', 'lazyload'),\r\n      width,\r\n      height\r\n    }\r\n\r\n    return (\r\n      <span>\r\n        <noscript>\r\n          <img {...noScriptImgProps} />\r\n        </noscript>\r\n        <img {...imgProps} />\r\n      </span>\r\n    )\r\n  }\r\n```\r\n\r\nDoes React have an issue with `noscript` tags..?\r\n\r\n"
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11422",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11422/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11422/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11422/events",
        "html_url": "https://github.com/facebook/react/pull/11422",
        "id": 270175058,
        "number": 11422,
        "title": "support Call and Return components in React.Children calls",
        "user": {
            "login": "MatteoVH",
            "id": 4573586,
            "avatar_url": "https://avatars1.githubusercontent.com/u/4573586?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MatteoVH",
            "html_url": "https://github.com/MatteoVH",
            "followers_url": "https://api.github.com/users/MatteoVH/followers",
            "following_url": "https://api.github.com/users/MatteoVH/following{/other_user}",
            "gists_url": "https://api.github.com/users/MatteoVH/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MatteoVH/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MatteoVH/subscriptions",
            "organizations_url": "https://api.github.com/users/MatteoVH/orgs",
            "repos_url": "https://api.github.com/users/MatteoVH/repos",
            "events_url": "https://api.github.com/users/MatteoVH/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MatteoVH/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 196858374,
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-11-01T02:32:05Z",
        "updated_at": "2017-11-02T10:52:03Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/11422",
            "html_url": "https://github.com/facebook/react/pull/11422",
            "diff_url": "https://github.com/facebook/react/pull/11422.diff",
            "patch_url": "https://github.com/facebook/react/pull/11422.patch"
        },
        "body": "Solves #11416\r\n\r\n@gaearon, I tried to read up a bit on Call and Return, but I'm (obviously seeing as it's an experimental API) inexperienced with them. Let me know if I'm testing their usage satisfactorily!"
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11419",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11419/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11419/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11419/events",
        "html_url": "https://github.com/facebook/react/issues/11419",
        "id": 270143418,
        "number": 11419,
        "title": "Capture attribute only supports boolean values",
        "user": {
            "login": "maxschmeling",
            "id": 112691,
            "avatar_url": "https://avatars1.githubusercontent.com/u/112691?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxschmeling",
            "html_url": "https://github.com/maxschmeling",
            "followers_url": "https://api.github.com/users/maxschmeling/followers",
            "following_url": "https://api.github.com/users/maxschmeling/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxschmeling/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxschmeling/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxschmeling/subscriptions",
            "organizations_url": "https://api.github.com/users/maxschmeling/orgs",
            "repos_url": "https://api.github.com/users/maxschmeling/repos",
            "events_url": "https://api.github.com/users/maxschmeling/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxschmeling/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "clemmy",
            "id": 3696934,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3696934?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/clemmy",
            "html_url": "https://github.com/clemmy",
            "followers_url": "https://api.github.com/users/clemmy/followers",
            "following_url": "https://api.github.com/users/clemmy/following{/other_user}",
            "gists_url": "https://api.github.com/users/clemmy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/clemmy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/clemmy/subscriptions",
            "organizations_url": "https://api.github.com/users/clemmy/orgs",
            "repos_url": "https://api.github.com/users/clemmy/repos",
            "events_url": "https://api.github.com/users/clemmy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/clemmy/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "clemmy",
                "id": 3696934,
                "avatar_url": "https://avatars0.githubusercontent.com/u/3696934?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/clemmy",
                "html_url": "https://github.com/clemmy",
                "followers_url": "https://api.github.com/users/clemmy/followers",
                "following_url": "https://api.github.com/users/clemmy/following{/other_user}",
                "gists_url": "https://api.github.com/users/clemmy/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/clemmy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clemmy/subscriptions",
                "organizations_url": "https://api.github.com/users/clemmy/orgs",
                "repos_url": "https://api.github.com/users/clemmy/repos",
                "events_url": "https://api.github.com/users/clemmy/events{/privacy}",
                "received_events_url": "https://api.github.com/users/clemmy/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-10-31T22:50:05Z",
        "updated_at": "2017-10-31T23:45:22Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "This is a follow-up to #4784.\r\n\r\nThe `capture` attribute on `input` elements is currently supported, but it is configured as a `HAS_BOOLEAN_VALUE` attribute: https://github.com/facebook/react/blob/1eed302d346bfb8f5db8d88b0e7096d8999d3548/packages/react-dom/src/shared/HTMLDOMPropertyConfig.js#L33\r\n\r\nThis causes\r\n```\r\n<input type=\"file\" capture=\"user\" />\r\n```\r\nto render as\r\n```\r\n<input type=\"file\" capture />\r\n```\r\n\r\nThe `capture` attribute supports strings though: https://www.w3.org/TR/html-media-capture/#the-capture-attribute\r\n\r\nThis is very important for being able to configure the default camera selected on mobile devices."
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11417",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11417/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11417/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11417/events",
        "html_url": "https://github.com/facebook/react/issues/11417",
        "id": 270120147,
        "number": 11417,
        "title": "Treat value={null} as empty string",
        "user": {
            "login": "IndifferentDisdain",
            "id": 1360908,
            "avatar_url": "https://avatars0.githubusercontent.com/u/1360908?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IndifferentDisdain",
            "html_url": "https://github.com/IndifferentDisdain",
            "followers_url": "https://api.github.com/users/IndifferentDisdain/followers",
            "following_url": "https://api.github.com/users/IndifferentDisdain/following{/other_user}",
            "gists_url": "https://api.github.com/users/IndifferentDisdain/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IndifferentDisdain/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IndifferentDisdain/subscriptions",
            "organizations_url": "https://api.github.com/users/IndifferentDisdain/orgs",
            "repos_url": "https://api.github.com/users/IndifferentDisdain/repos",
            "events_url": "https://api.github.com/users/IndifferentDisdain/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IndifferentDisdain/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2017-10-31T21:10:34Z",
        "updated_at": "2017-11-01T14:04:00Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Per @gaearon's request, I'm opening up a new issue based on https://github.com/facebook/react/issues/5013#issuecomment-340898727.\r\n\r\nCurrently, if you create an input like `<input value={null} onChange={this.handleChange} />`, the null value is a flag for React to treat this as an uncontrolled input, and a console warning is generated. However, this is often a valid condition. For example, when creating a new object (initialized w/ default values from the server then passed to the component as props) in a form that requires address, Address Line 2 is often optional. As such, passing null as value to this controlled component is a very reasonable thing to do.\r\n\r\nOne can do a workaround, i.e. `<input value={foo || ''} onChange={this.handleChange} />`, but this is an error-prone approach and quite awkward.\r\n\r\nPer issue referenced above, the React team has planned on treating null as an empty string, but that hasn't yet occurred. I'd like to propose tackling this problem in the near future.\r\n\r\nPlease let me know if I can help further."
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11416",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11416/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11416/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11416/events",
        "html_url": "https://github.com/facebook/react/issues/11416",
        "id": 270114264,
        "number": 11416,
        "title": "React.Children support for Call and Return types",
        "user": {
            "login": "MatteoVH",
            "id": 4573586,
            "avatar_url": "https://avatars1.githubusercontent.com/u/4573586?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MatteoVH",
            "html_url": "https://github.com/MatteoVH",
            "followers_url": "https://api.github.com/users/MatteoVH/followers",
            "following_url": "https://api.github.com/users/MatteoVH/following{/other_user}",
            "gists_url": "https://api.github.com/users/MatteoVH/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MatteoVH/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MatteoVH/subscriptions",
            "organizations_url": "https://api.github.com/users/MatteoVH/orgs",
            "repos_url": "https://api.github.com/users/MatteoVH/repos",
            "events_url": "https://api.github.com/users/MatteoVH/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MatteoVH/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 139653724,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
                "name": "Component: Core Utilities",
                "color": "c5def5",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-10-31T20:50:23Z",
        "updated_at": "2017-10-31T21:43:07Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "Include React `Call`s and `Return`s (as defined in [this sub-repo](https://github.com/facebook/react/tree/master/packages/react-call-return)) in the children enumerated over by `React.Children`. Should be similar to the `Portal` support added in #11378. This issue is a follow up to #11373 and was [suggested by @gaearon](https://github.com/facebook/react/pull/11378#issuecomment-340789791)."
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11404",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11404/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11404/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11404/events",
        "html_url": "https://github.com/facebook/react/pull/11404",
        "id": 269850491,
        "number": 11404,
        "title": "Issue #11257 - Apply \"files\" npm whitelist at build time",
        "user": {
            "login": "yu-tian113",
            "id": 1249823,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1249823?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yu-tian113",
            "html_url": "https://github.com/yu-tian113",
            "followers_url": "https://api.github.com/users/yu-tian113/followers",
            "following_url": "https://api.github.com/users/yu-tian113/following{/other_user}",
            "gists_url": "https://api.github.com/users/yu-tian113/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yu-tian113/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yu-tian113/subscriptions",
            "organizations_url": "https://api.github.com/users/yu-tian113/orgs",
            "repos_url": "https://api.github.com/users/yu-tian113/repos",
            "events_url": "https://api.github.com/users/yu-tian113/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yu-tian113/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 196858374,
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2017-10-31T06:37:03Z",
        "updated_at": "2017-11-04T03:55:18Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/11404",
            "html_url": "https://github.com/facebook/react/pull/11404",
            "diff_url": "https://github.com/facebook/react/pull/11404.diff",
            "patch_url": "https://github.com/facebook/react/pull/11404.patch"
        },
        "body": "Compare files/folders in package/npm to \"files\" entries in package.json, only copy whitelisted files/folders to build.\r\n"
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11401",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11401/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11401/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11401/events",
        "html_url": "https://github.com/facebook/react/issues/11401",
        "id": 269655958,
        "number": 11401,
        "title": "WIP RFC: Improvements to the \"ref\" system",
        "user": {
            "login": "trueadm",
            "id": 1519870,
            "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/trueadm",
            "html_url": "https://github.com/trueadm",
            "followers_url": "https://api.github.com/users/trueadm/followers",
            "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
            "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
            "organizations_url": "https://api.github.com/users/trueadm/orgs",
            "repos_url": "https://api.github.com/users/trueadm/repos",
            "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/trueadm/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739777675,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
                "name": "Component: Component API",
                "color": "d4c5f9",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 20,
        "created_at": "2017-10-30T16:01:55Z",
        "updated_at": "2017-11-03T15:36:54Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "This is a formal discussion to talk about the future of refs within React and how we can improve upon them. \r\n\r\n## Current Behavior\r\n\r\nCurrently, there are two ways of doing refs in React, string refs and callback refs.\r\n\r\n### String refs\r\n\r\nString refs can be applied to \"composite\" components that are class components (i.e. `<MyComponent />`) and \"host\" components (i.e. `<span />`). \r\n\r\nAn example of how this might look like for both types:\r\n\r\n```jsx\r\n// host components\r\nclass MyComponent extends React.Component {\r\n  componentDidMount() {\r\n    this.refs.input.focus();\r\n  }\r\n  render() {\r\n    return <div><input ref=\"input\" type=\"text\" /></div>\r\n  }\r\n}\r\n\r\n// composite components\r\nclass InputWrapper extends React.Component {\r\n  focus() {\r\n    this.refs.input.focus();\r\n  }\r\n  render() {\r\n    return <input ref=\"input\" type=\"text\" />\r\n  }\r\n}\r\nclass FormComponent extends React.Component {\r\n  componentDidMount() {\r\n    this.refs.inputWrapper.focus()\r\n  }\r\n  render() {\r\n    return <InputWrapper ref=\"inputWrapper\" />\r\n  }\r\n}\r\n```\r\n\r\n### Callback refs\r\n\r\nCallback refs can also be applied to \"composite\" components that are class components (i.e. `<MyComponent />`) and \"host\" components (i.e. `<span />`). \r\n\r\nAn example of how this might look like for both types:\r\n\r\n```jsx\r\n// host components\r\nclass MyComponent extends React.Component {\r\n  componentDidMount() {\r\n    if (this._inputNode) {\r\n      this._inputNode.focus();\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input ref={domNode => this._inputNode = domNode} type=\"text\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// composite components\r\nclass InputWrapper extends React.Component {\r\n  focus() {\r\n    this._input.focus();\r\n  }\r\n  render() {\r\n    return <input ref={domNode => this._input = domNode} type=\"text\" />\r\n  }\r\n}\r\nclass FormComponent extends React.Component {\r\n  componentDidMount() {\r\n    this._inputWrapper.focus()\r\n  }\r\n  render() {\r\n    return <InputWrapper ref={instance => this._inputWrapper = instance} />\r\n  }\r\n}\r\n```\r\n\r\n## Proposed Behavior\r\n\r\nI propose three major changes to how the current ref system works:\r\n\r\n### Deprecate string refs for removal in React 17\r\n\r\nThe ref API is broken is several aspects (taken from https://github.com/facebook/react/issues/1373).\r\n\r\n- You have to refer to this.refs['myname'] as strings to be Closure Compiler Advanced Mode compatible.\r\n- It doesn't allow the notion of multiple owners of a single instance.\r\n- Magical dynamic strings potentially break optimizations in VMs.\r\n- It needs to be always consistent, because it's synchronously resolved. This means that asynchronous batching of rendering introduces potential bugs.\r\n- We currently have a hook to get sibling refs so that you can have one component refer to it's sibling as a context reference. This only works one level. This breaks the ability to wrap one of those in an encapsulation.\r\n- It can't be statically typed. You have to cast it at any use in languages like Flow or TypeScript.\r\n- There's no way to attach the ref to the correct \"owner\" in a callback invoked by a child. `<Child renderer={index => <div ref=\"test\">{index}</div>} />` -- this ref will be attached where the callback is issued, not in the current owner.\r\n- They require access to the React runtime to find the current owner during the creation of a ReactElement, making ahead-of-time optimizations hard to deal with.\r\n\r\nCallback refs do not have the above issues and have been the recommended choice by the React team for some time. You can already do everything and more with callback refs, so I personally feel there's no need to keep the string ref system around.\r\n\r\nOther libraries, such as Inferno and Preact have already removed string refs and have reported performance optimization from doing so.\r\n\r\n### Deprecate the \"ref\" prop entirely\r\n\r\nI feel refs on components lead to problematic patterns that make apps much harder to scale because it can easily break the uni-direction flow of a component tree. In my opinion, class components shouldn't be able to access the instances of other components for communication – they should use `props` instead. Alternatively, in cases where access of a root DOM node is needed but unavailable, a wrapper component (https://github.com/facebook/react/issues/11401#issuecomment-340543801) could be used as an escape hatch.\r\n\r\nThe below example is something that I personally feel is a problematic pattern and one that I've seen bite teams in the past:\r\n\r\n```jsx\r\nclass ItemContainer extends React.Component {\r\n  render() {\r\n    let { subscribe, unsubscribe } = props.SubscriptionHandler;\r\n\r\n    return (\r\n      <ul>\r\n        { this.props.items.map( item => (\r\n           <ListItem \r\n              key={item.uid}\r\n              data={item.data}\r\n              ref={\r\n                _ref => _ref ? subscribe(item.uid, _ref) : unsubscribe(item.uid, _ref)\r\n              }\r\n           />\r\n         ) }\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nThe above example couples all the handling of the items in the item container, breaking the control flow. Ideally, the `SubscriptionHandler` should be passed to the child as a prop, then the child can control its own flow.\r\n\r\nAnother usage of refs on composite components is related to `ReactDOM.findDOMNode(...)` usage. By passing `findDOMNode` the component instance from the ref, you can get back the root DOM node. An example of this follows:\r\n\r\n```jsx\r\nclass DOMContainer extends React.Component {\r\n  render() {\r\n    if (this.props.type === \"inline\") {\r\n      return <span />;\r\n    } else {\r\n      return <div />;\r\n    }\r\n  }\r\n}\r\nclass Appender extends React.Component {\r\n  componentDidMount() {\r\n    ReactDOM.findDOMNode(this._domContainer).appendChild(this.props.node);\r\n  }\r\n  render() {\r\n   return <DOMContainer ref={_ref => this._domContainer = _ref} type=\"inline\" />\r\n  }\r\n}\r\n```\r\n\r\nThis approach can be avoided in this instance by passing refs via props:\r\n\r\n```jsx\r\nfunction DOMContainer(props) {\r\n  if (props.type === \"inline\") {\r\n    return <span ref={props.rootRef} />;\r\n  } else {\r\n    return <div ref={props.rootRef} />;\r\n  }\r\n}\r\nclass Appender extends React.Component {\r\n  componentDidMount() {\r\n     this._rootRef.appendChild(this.props.node);\r\n  }\r\n  render() {\r\n   return <DOMContainer rootRef={_ref => this._rootRef = _ref} type=\"inline\" />\r\n  }\r\n}\r\n```\r\n\r\n### Add a special \"hostRef\" prop that only works on host components\r\n\r\nThis is to reduce confusion, as `hostRef` would be a normal prop on composite components. Keeping the current \"ref\" naming might cause unintended problems. This would also allow apps to move over to the new system incrementally. Furthermore, `hostRef` should only accept callback refs, not string refs. An example of this:\r\n\r\n```jsx\r\nfunction Button({ className, ...props }) {\r\n  return (\r\n    <button\r\n      {...props}\r\n      className={classNames(className, 'my-btn')}\r\n    />\r\n  );\r\n}\r\n\r\n// \"hostRef\" is a simple prop here, and gets passed through to the <button> child via JSX spread\r\n<Button hostRef={ _ref => console.log(_ref) } className=\"headerBtn\" />\r\n```\r\n\r\n## Downsides\r\n\r\n### Migration Cost\r\n\r\nBoth changes in this proposal have a cost for migration. \r\n\r\n- String refs are still widely used in third-party components but are likely to be trackable and upgraded via codemodding.\r\n- Refs on composite components are far more widely used than string refs, so it may not make sense to make those changes vs the cost it will have on the React ecosystem. It's unlikely that they can be upgraded via a codemod.\r\n\r\n### Codemodding\r\n\r\nIt may be possible to automate the vast majority of string refs to callback refs via a codemod. There will need to be some form of checking for where the owner of a ref differs in cases of string refs vs callback refs. [This point needs to be broken apart and discussed more]\r\n\r\nIt might not be possible to automate a codemod for refs on composite components as it would require a change in how the structure of the components in an app work. [This point needs to be broken apart and discussed more]\r\n\r\n## Other Considerations?\r\n\r\nReact Native currently doesn't have host components, only composite components. So refs on core components such as `<View />` will need special consideration for how they may function as they do now. Maybe they could function by a prop called `viewRef` or something similar, which would work like refs currently do."
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11396",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11396/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11396/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11396/events",
        "html_url": "https://github.com/facebook/react/issues/11396",
        "id": 269471319,
        "number": 11396,
        "title": "Cannot render an iterable function if it's in an array of children",
        "user": {
            "login": "kentcdodds",
            "id": 1500684,
            "avatar_url": "https://avatars0.githubusercontent.com/u/1500684?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kentcdodds",
            "html_url": "https://github.com/kentcdodds",
            "followers_url": "https://api.github.com/users/kentcdodds/followers",
            "following_url": "https://api.github.com/users/kentcdodds/following{/other_user}",
            "gists_url": "https://api.github.com/users/kentcdodds/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kentcdodds/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kentcdodds/subscriptions",
            "organizations_url": "https://api.github.com/users/kentcdodds/orgs",
            "repos_url": "https://api.github.com/users/kentcdodds/repos",
            "events_url": "https://api.github.com/users/kentcdodds/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kentcdodds/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 739761016,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
                "name": "Component: Reconciler",
                "color": "f9a798",
                "default": false
            },
            {
                "id": 40929151,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
                "name": "Type: Bug",
                "color": "b60205",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-10-30T03:25:08Z",
        "updated_at": "2017-11-03T15:16:57Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*bug* (I think)\r\n\r\n**What is the current behavior?**\r\nHere's a [codesandbox](https://codesandbox.io/s/0ml3roomr0). Or just plop this in an `index.html`:\r\n\r\n```html\r\n<body>\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0/umd/react.development.js\"></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0/umd/react-dom.development.js\"></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script type=\"text/babel\">\r\nfunction makeRenderable(fn, valueGetter) {\r\n  const ITERATOR_SYMBOL =\r\n    (typeof Symbol === 'function' && Symbol.iterator) || '@@iterator'\r\n  function iterator() {\r\n    let timesCalled = 0\r\n    return {\r\n      next() {\r\n        const done = timesCalled++ > 0\r\n        return {done, value: done ? undefined : valueGetter()}\r\n      },\r\n    }\r\n  }\r\n  fn[ITERATOR_SYMBOL] = iterator\r\n  return fn\r\n}\r\n\r\nconst renderableFunction = makeRenderable(function(a, b) {\r\n  // kinda irrelevant what goes on in here...\r\n  return a + b\r\n}, () => 'I am the rendered version of the function')\r\n\r\nfunction Working() {\r\n  return (\r\n    <div>\r\n      This works: <div>{renderableFunction}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction NotWorking() {\r\n  return <div>This does not work: {renderableFunction}</div>\r\n}\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <Working />\r\n    <hr />\r\n    <NotWorking />\r\n  </div>,\r\n  document.getElementById('root'),\r\n)\r\n</script>\r\n</body>\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI expect that things will render the same regardless of whether they're an only child or a member of an array of children.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nYes, [it worked in React@15](https://codesandbox.io/s/8zlpvjzjy9).\r\n\r\n**Suggested Solution**\r\n\r\nI'm fairly confident that the issue is in the array of children case, the [`getIteratorFn` call](https://github.com/facebook/react/blob/2c0a8fb99e945315c9dce7a15c85775d51f5755d/packages/react-reconciler/src/ReactChildFiber.js#L578-L586) is within a `typeof newChild === 'object' && newChild !== null` if statement, whereas the original [reconcileChildFibers](https://github.com/facebook/react/blob/2c0a8fb99e945315c9dce7a15c85775d51f5755d/packages/react-reconciler/src/ReactChildFiber.js#L1358) puts the [`getIteratorFn` call outside it](https://github.com/facebook/react/blob/2c0a8fb99e945315c9dce7a15c85775d51f5755d/packages/react-reconciler/src/ReactChildFiber.js#L1434-L1441).\r\n\r\nIf I'm not mistaken, a simple fix would be to move [this curly brace](https://github.com/facebook/react/blob/2c0a8fb99e945315c9dce7a15c85775d51f5755d/packages/react-reconciler/src/ReactChildFiber.js#L589) a few lines up :wink:\r\n\r\nI'm happy to do so complete with a test given a little direction (like, where the test should go). Thanks!"
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11387",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11387/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11387/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11387/events",
        "html_url": "https://github.com/facebook/react/issues/11387",
        "id": 269148824,
        "number": 11387,
        "title": "createPortal: support option to stop propagation of events in React tree",
        "user": {
            "login": "kib357",
            "id": 347668,
            "avatar_url": "https://avatars3.githubusercontent.com/u/347668?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kib357",
            "html_url": "https://github.com/kib357",
            "followers_url": "https://api.github.com/users/kib357/followers",
            "following_url": "https://api.github.com/users/kib357/following{/other_user}",
            "gists_url": "https://api.github.com/users/kib357/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kib357/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kib357/subscriptions",
            "organizations_url": "https://api.github.com/users/kib357/orgs",
            "repos_url": "https://api.github.com/users/kib357/repos",
            "events_url": "https://api.github.com/users/kib357/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kib357/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-10-27T15:36:49Z",
        "updated_at": "2017-10-28T00:41:23Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature, but also a bug cause new API breaks old `unstable_rendersubtreeintocontainer`\r\n\r\n**What is the current behavior?**\r\nWe cannot stop all events propagation from portal to its React tree ancestors. Our layers mechanism with modals/popovers completely broken. For example, we have a dropdown button. When we click on it, click opens popover. We also want to close this popover when clicking on same button. With createPortal, click inside popover fires click on button, and it's closing. We can use stopPropagation in this simple case. But we have tons of such cases, and we need use stopPropagation for all of them. Also, we cannot stop all events.\r\n\r\n**What is the expected behavior?**\r\ncreatePortal should have an option to stop synthetic events propagation through React tree without manually stopping every event. What do you think?\r\n"
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11386",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11386/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11386/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11386/events",
        "html_url": "https://github.com/facebook/react/pull/11386",
        "id": 269116946,
        "number": 11386,
        "title": "Update Flow",
        "user": {
            "login": "gaearon",
            "id": 810438,
            "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaearon",
            "html_url": "https://github.com/gaearon",
            "followers_url": "https://api.github.com/users/gaearon/followers",
            "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
            "organizations_url": "https://api.github.com/users/gaearon/orgs",
            "repos_url": "https://api.github.com/users/gaearon/repos",
            "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaearon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 196858374,
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-10-27T13:59:41Z",
        "updated_at": "2017-10-27T15:54:58Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/11386",
            "html_url": "https://github.com/facebook/react/pull/11386",
            "diff_url": "https://github.com/facebook/react/pull/11386.diff",
            "patch_url": "https://github.com/facebook/react/pull/11386.patch"
        },
        "body": "See individual commits.\r\n\r\nI had to explicitly annotate ReactDOM host config because otherwise the inference wasn’t good enough.\r\n\r\nI actually kind of like it this way because in the past it was often unclear where the inference failed.\r\nNow it’s explicit.\r\n\r\nI can update other renderers too if you want but this is enough to get it passing."
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11385",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11385/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11385/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11385/events",
        "html_url": "https://github.com/facebook/react/pull/11385",
        "id": 269101909,
        "number": 11385,
        "title": "Rewrite setInnerHTML tests to use Public API.",
        "user": {
            "login": "silvestrijonathan",
            "id": 10540173,
            "avatar_url": "https://avatars3.githubusercontent.com/u/10540173?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/silvestrijonathan",
            "html_url": "https://github.com/silvestrijonathan",
            "followers_url": "https://api.github.com/users/silvestrijonathan/followers",
            "following_url": "https://api.github.com/users/silvestrijonathan/following{/other_user}",
            "gists_url": "https://api.github.com/users/silvestrijonathan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/silvestrijonathan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/silvestrijonathan/subscriptions",
            "organizations_url": "https://api.github.com/users/silvestrijonathan/orgs",
            "repos_url": "https://api.github.com/users/silvestrijonathan/repos",
            "events_url": "https://api.github.com/users/silvestrijonathan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/silvestrijonathan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 196858374,
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2017-10-27T13:10:34Z",
        "updated_at": "2017-11-03T20:56:50Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/11385",
            "html_url": "https://github.com/facebook/react/pull/11385",
            "diff_url": "https://github.com/facebook/react/pull/11385.diff",
            "patch_url": "https://github.com/facebook/react/pull/11385.patch"
        },
        "body": "Ref #11299\r\n\r\nThis rewrites the `setInnerHTML` tests to utilize `dangerouslySetInnerHTML` to ensure that nodes with and without the `innerHTML` attribute are properly set!"
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11383",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11383/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11383/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11383/events",
        "html_url": "https://github.com/facebook/react/pull/11383",
        "id": 268987852,
        "number": 11383,
        "title": "Rewrite ReactDOMComponentTree-test to test behavior using Public API",
        "user": {
            "login": "GordyD",
            "id": 966511,
            "avatar_url": "https://avatars2.githubusercontent.com/u/966511?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GordyD",
            "html_url": "https://github.com/GordyD",
            "followers_url": "https://api.github.com/users/GordyD/followers",
            "following_url": "https://api.github.com/users/GordyD/following{/other_user}",
            "gists_url": "https://api.github.com/users/GordyD/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GordyD/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GordyD/subscriptions",
            "organizations_url": "https://api.github.com/users/GordyD/orgs",
            "repos_url": "https://api.github.com/users/GordyD/repos",
            "events_url": "https://api.github.com/users/GordyD/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GordyD/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 196858374,
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2017-10-27T04:54:10Z",
        "updated_at": "2017-11-03T02:35:08Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/11383",
            "html_url": "https://github.com/facebook/react/pull/11383",
            "diff_url": "https://github.com/facebook/react/pull/11383.diff",
            "patch_url": "https://github.com/facebook/react/pull/11383.patch"
        },
        "body": "This is part of #11299\r\n\r\nI've tried to identify cases where code within ReactDOMComponentTree is exercised via the public API and have updated accordingly but I'm not entirely sure whether I'm on the right track. I thought I'd PR to get feedback from the community. Looking forward to comments."
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11380",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11380/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11380/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11380/events",
        "html_url": "https://github.com/facebook/react/pull/11380",
        "id": 268937393,
        "number": 11380,
        "title": "[WIP] fix(SelectEventPlugin): reset mouseDown after drop event fires",
        "user": {
            "login": "tobiasandersen",
            "id": 3599069,
            "avatar_url": "https://avatars2.githubusercontent.com/u/3599069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tobiasandersen",
            "html_url": "https://github.com/tobiasandersen",
            "followers_url": "https://api.github.com/users/tobiasandersen/followers",
            "following_url": "https://api.github.com/users/tobiasandersen/following{/other_user}",
            "gists_url": "https://api.github.com/users/tobiasandersen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tobiasandersen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tobiasandersen/subscriptions",
            "organizations_url": "https://api.github.com/users/tobiasandersen/orgs",
            "repos_url": "https://api.github.com/users/tobiasandersen/repos",
            "events_url": "https://api.github.com/users/tobiasandersen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tobiasandersen/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 196858374,
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-10-26T22:56:31Z",
        "updated_at": "2017-10-26T22:56:37Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/11380",
            "html_url": "https://github.com/facebook/react/pull/11380",
            "diff_url": "https://github.com/facebook/react/pull/11380.diff",
            "patch_url": "https://github.com/facebook/react/pull/11380.patch"
        },
        "body": "This PR most probably isn't ready, it's rather intended to fix (or at least highlight the problems of) https://github.com/facebook/react/issues/11379. The problem is that `mouseDown` never gets reset after the drop event, since this plugin never receives `topMouseUp` as `topLevelType` when dropping. \r\n\r\nWhat I did here fixes the problem, but I feel like the proper solution would be to make sure that the `topMouseUp` event is received.\r\n"
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11379",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11379/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11379/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11379/events",
        "html_url": "https://github.com/facebook/react/issues/11379",
        "id": 268935502,
        "number": 11379,
        "title": "onDrop breaks onSelect event",
        "user": {
            "login": "tobiasandersen",
            "id": 3599069,
            "avatar_url": "https://avatars2.githubusercontent.com/u/3599069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tobiasandersen",
            "html_url": "https://github.com/tobiasandersen",
            "followers_url": "https://api.github.com/users/tobiasandersen/followers",
            "following_url": "https://api.github.com/users/tobiasandersen/following{/other_user}",
            "gists_url": "https://api.github.com/users/tobiasandersen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tobiasandersen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tobiasandersen/subscriptions",
            "organizations_url": "https://api.github.com/users/tobiasandersen/orgs",
            "repos_url": "https://api.github.com/users/tobiasandersen/repos",
            "events_url": "https://api.github.com/users/tobiasandersen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tobiasandersen/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-10-26T22:46:34Z",
        "updated_at": "2017-11-03T21:54:13Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nAfter an `onDrop` event has fired inside an \"editable\" element (input, textarea, contentEditable), the `onSelect` event on that element will no longer fire when changing selection using the keyboard. \r\n\r\nAs you can see in this gif below, the onSelect event gets called each time I move the cursor around (using the arrow keys). But once the `onDrop` event has fired, `onSelect` will no longer fire when I move the cursor around (also using the keys):\r\n\r\n![react-onselect-bug](https://user-images.githubusercontent.com/3599069/32080216-bd42f580-baae-11e7-98ee-93a482ed80ca.gif)\r\n\r\n[Here's the jsfiddle](https://jsfiddle.net/owmL8n6u/1/) I used to record the video above.\r\n\r\n**What is the expected behavior?**\r\nThe `onSelect` event should always fire when selection changes.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16 / Chrome 62"
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11369",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11369/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11369/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11369/events",
        "html_url": "https://github.com/facebook/react/issues/11369",
        "id": 268762895,
        "number": 11369,
        "title": "React should recognize the `valueAsDate` property on DOM elements",
        "user": {
            "login": "kreba",
            "id": 1609828,
            "avatar_url": "https://avatars2.githubusercontent.com/u/1609828?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kreba",
            "html_url": "https://github.com/kreba",
            "followers_url": "https://api.github.com/users/kreba/followers",
            "following_url": "https://api.github.com/users/kreba/following{/other_user}",
            "gists_url": "https://api.github.com/users/kreba/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kreba/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kreba/subscriptions",
            "organizations_url": "https://api.github.com/users/kreba/orgs",
            "repos_url": "https://api.github.com/users/kreba/repos",
            "events_url": "https://api.github.com/users/kreba/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kreba/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-10-26T13:37:14Z",
        "updated_at": "2017-11-01T14:23:41Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "The `valueAsDate` property on the ES6 definition of `HTMLInputElement` is not yet recognized by React. It should be, though.\r\n\r\nThe `valueAsDate` property relieves the pain of having to deal with both browsers that support HTML5 date inputs and those who don't; the former require the `value` property to be of the form `\"YYYY-MM-DD\"` and the latter require a nicely formatted date (e.g. `\"MM/DD/YYYY\"`) since the user will see exactly that. (React won't even allow that in conjunction with `type=\"date\"`, though, and proclaim that the machine readable format should be used.) \r\nThe browsers that do support HTML5 date input (should) alternatively support the date being passed in through the `valueAsDate` property. If we use that, we can always put a nicely formatted date in the `value` property. Pain relieved! (And also React should allow any format in the `value` property in that case.)\r\n\r\nAs indicated above, browser support is still lacky at best, even with the most avant garde browsers. Hence this is not an urgent issue for React. It will get relevant, though, and is herein duly noted."
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11367",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11367/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11367/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11367/events",
        "html_url": "https://github.com/facebook/react/pull/11367",
        "id": 268761737,
        "number": 11367,
        "title": "Rewrite SyntheticWheelEvent-test depending on internal API (#11299)",
        "user": {
            "login": "douglasgimli",
            "id": 6667145,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6667145?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/douglasgimli",
            "html_url": "https://github.com/douglasgimli",
            "followers_url": "https://api.github.com/users/douglasgimli/followers",
            "following_url": "https://api.github.com/users/douglasgimli/following{/other_user}",
            "gists_url": "https://api.github.com/users/douglasgimli/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/douglasgimli/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/douglasgimli/subscriptions",
            "organizations_url": "https://api.github.com/users/douglasgimli/orgs",
            "repos_url": "https://api.github.com/users/douglasgimli/repos",
            "events_url": "https://api.github.com/users/douglasgimli/events{/privacy}",
            "received_events_url": "https://api.github.com/users/douglasgimli/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 196858374,
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2017-10-26T13:33:48Z",
        "updated_at": "2017-10-31T14:54:22Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/11367",
            "html_url": "https://github.com/facebook/react/pull/11367",
            "diff_url": "https://github.com/facebook/react/pull/11367.diff",
            "patch_url": "https://github.com/facebook/react/pull/11367.patch"
        },
        "body": "Rewrite SyntheticWheelEvent-test to remove internal API dependencies based in issue #11299 "
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11366",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11366/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11366/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11366/events",
        "html_url": "https://github.com/facebook/react/issues/11366",
        "id": 268720167,
        "number": 11366,
        "title": "Add a way to opt out of User Timing API calls",
        "user": {
            "login": "artin-phares",
            "id": 671082,
            "avatar_url": "https://avatars2.githubusercontent.com/u/671082?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/artin-phares",
            "html_url": "https://github.com/artin-phares",
            "followers_url": "https://api.github.com/users/artin-phares/followers",
            "following_url": "https://api.github.com/users/artin-phares/following{/other_user}",
            "gists_url": "https://api.github.com/users/artin-phares/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/artin-phares/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/artin-phares/subscriptions",
            "organizations_url": "https://api.github.com/users/artin-phares/orgs",
            "repos_url": "https://api.github.com/users/artin-phares/repos",
            "events_url": "https://api.github.com/users/artin-phares/events{/privacy}",
            "received_events_url": "https://api.github.com/users/artin-phares/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 121709921,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
                "name": "Type: Feature Request",
                "color": "c7def8",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-10-26T11:13:56Z",
        "updated_at": "2017-10-26T19:28:41Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**  \r\n\r\nbug or v16 feature (dont know)\r\n\r\n**What is the current behavior?**  \r\n\r\nWhen building in dev environment, performance timeline measures appear by default,  \r\nie. without `?react_perf` query string as in v15 described [here](https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab)\r\n\r\n`react@16.0.0`\r\n\r\nif it's not a bug, then what's the way to disable `react` perf measures?  \r\n\r\nNeed a way to clear timeline to focus on my own custom perf measures.\r\n"
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11365",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11365/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11365/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11365/events",
        "html_url": "https://github.com/facebook/react/pull/11365",
        "id": 268574894,
        "number": 11365,
        "title": "Refactor SyntheticClipboardEvent tests to only use the public API",
        "user": {
            "login": "smaniotto",
            "id": 6256337,
            "avatar_url": "https://avatars2.githubusercontent.com/u/6256337?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/smaniotto",
            "html_url": "https://github.com/smaniotto",
            "followers_url": "https://api.github.com/users/smaniotto/followers",
            "following_url": "https://api.github.com/users/smaniotto/following{/other_user}",
            "gists_url": "https://api.github.com/users/smaniotto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/smaniotto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/smaniotto/subscriptions",
            "organizations_url": "https://api.github.com/users/smaniotto/orgs",
            "repos_url": "https://api.github.com/users/smaniotto/repos",
            "events_url": "https://api.github.com/users/smaniotto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/smaniotto/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 196858374,
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-10-25T22:44:03Z",
        "updated_at": "2017-11-01T17:10:08Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/11365",
            "html_url": "https://github.com/facebook/react/pull/11365",
            "diff_url": "https://github.com/facebook/react/pull/11365.diff",
            "patch_url": "https://github.com/facebook/react/pull/11365.patch"
        },
        "body": "This is related to #11299 \r\n\r\nI've reimplemented the previous tests using only the public API, but I'm uncertain about their coverage. It doesn't check things like `setData` and `getData` behavior on the `clipboardData` (`DataTransfer`) object, for instance. We would actually rely on implementation mocks to test these things anyway, since there's no implementation of `Range` on `jsdom` and `DataTransfer` doesn't have a constructor."
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11347",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11347/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11347/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11347/events",
        "html_url": "https://github.com/facebook/react/issues/11347",
        "id": 267902244,
        "number": 11347,
        "title": "RFC: Plan for custom element attributes/properties in React 17",
        "user": {
            "login": "robdodson",
            "id": 1066253,
            "avatar_url": "https://avatars0.githubusercontent.com/u/1066253?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robdodson",
            "html_url": "https://github.com/robdodson",
            "followers_url": "https://api.github.com/users/robdodson/followers",
            "following_url": "https://api.github.com/users/robdodson/following{/other_user}",
            "gists_url": "https://api.github.com/users/robdodson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robdodson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robdodson/subscriptions",
            "organizations_url": "https://api.github.com/users/robdodson/orgs",
            "repos_url": "https://api.github.com/users/robdodson/repos",
            "events_url": "https://api.github.com/users/robdodson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robdodson/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 127893911,
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
                "name": "Component: DOM",
                "color": "fef2c0",
                "default": false
            },
            {
                "id": 710375792,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
                "name": "Type: Discussion",
                "color": "fef2c0",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 53,
        "created_at": "2017-10-24T05:28:49Z",
        "updated_at": "2017-11-03T01:59:24Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "This is meant to address #7249. The doc outlines the pros and cons of various approaches React could use to handle attributes and properties on custom elements.\r\n\r\n# TOC/Summary\r\n\r\n- Background\r\n- Proposals\r\n  * Option 1: Only set properties\r\n    + Pros\r\n      - Easy to understand/implement\r\n      - Avoids conflict with future global attributes\r\n      - Takes advantage of custom element \"upgrade\"\r\n      - Custom elements treated like any other React component\r\n    + Cons\r\n      - Possibly a breaking change\r\n      - Need ref to set attribute\r\n      - Not clear how server-side rendering would work\r\n  * Option 2: Properties-if-available\r\n    + Pros\r\n      - Non-breaking change\r\n    + Cons\r\n      - Developers need to understand the heuristic\r\n      - Falling back to attributes may conflict with future globals\r\n  * Option 3: Differentiate properties with a sigil\r\n    + Pros\r\n      - Non-breaking change that developers can opt-in to\r\n      - Similar to how other libraries handle attributes/properties\r\n      - The system is explicit\r\n    + Cons\r\n      - It’s new syntax\r\n      - Not clear how server-side rendering would work\r\n  * Option 4: Add an attributes object\r\n    + Pros\r\n      - The system is explicit\r\n      - Extending syntax may also solve issues with event handling\r\n    + Cons\r\n      - It’s new syntax\r\n      - It may be a breaking change\r\n      - It may be a larger change than any of the previous proposals\r\n  * Option 5: An API for consuming custom elements\r\n    + Pros\r\n      - The system is explicit\r\n      - Non-breaking change\r\n      - Idiomatic to React\r\n    + Cons\r\n      - Could be a lot of work for a complex component\r\n      - May bloat bundle size\r\n      - Config needs to keep pace with the component\r\n\r\n# Background\r\n\r\nWhen React tries to pass data to a custom element it always does so using HTML attributes.\r\n\r\n```jsx\r\n<x-foo bar={baz}> // same as setAttribute('bar', baz)\r\n```\r\n\r\nBecause attributes must be serialized to strings, this approach creates problems when the data being passed is an object or array. In that scenario, we end up with something like:\r\n\r\n```html\r\n<x-foo bar=\"[object Object]\">\r\n```\r\n\r\nThe workaround for this is to use a `ref` to manually set the property.\r\n\r\n```jsx\r\n<x-foo ref={el => el.bar = baz}>\r\n```\r\n\r\nThis workaround feels a bit unnecessary as the majority of custom elements being shipped today are written with libraries which automatically generate JavaScript properties that back all of their exposed attributes. And anyone hand-authoring a vanilla custom element is [encouraged to follow this practice](https://developers.google.com/web/fundamentals/web-components/best-practices#attributes-properties) as well. We'd like to ideally see runtime communication with custom elements in React use JavaScript properties by default.\r\n\r\nThis doc outlines a few proposals for how React could be updated to make this happen.\r\n\r\n# Proposals\r\n\r\n## Option 1: Only set properties\r\n\r\nRather than try to decide if a property or attribute should be set, React could *always* set properties on custom elements. React would **NOT** check to see if the property exists on the element beforehand.\r\n\r\n**Example:**\r\n\r\n```jsx\r\n<x-foo bar={baz}>\r\n```\r\n\r\nThe above code would result in React setting the `.bar` property of the `x-foo` element equal to the value of `baz`.\r\n\r\nFor camelCased property names, React could use the same style it uses today for properties like `tabIndex`.\r\n\r\n```jsx\r\n<x-foo squidInk={pasta}> // sets .squidInk = pasta\r\n```\r\n\r\n### Pros\r\n\r\n#### Easy to understand/implement\r\n\r\nThis model is simple, explicit, and dovetails with React’s [\"JavaScript-centric API to the DOM\"](https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html#why-are-we-changing-this).\r\n\r\nAny element created with libraries like Polymer or Skate will automatically generate properties to back their exposed attributes. These elements should all \"just work\" with the above approach. Developers hand-authoring vanilla components are encouraged to [back attributes with properties](https://developers.google.com/web/fundamentals/web-components/best-practices#always-accept-primitive-data-strings-numbers-booleans-as-either-attributes--or-properties) as that mirrors how *modern* (i.e. not oddballs like `<input>`) HTML5 elements (`<video>`, `<audio>`, etc.) have been implemented.\r\n\r\n#### Avoids conflict with future global attributes\r\n\r\nWhen React sets an attribute on a custom element there’s always the risk that a future version of HTML will ship a similarly named attribute and break things. This concern was [discussed with spec authors](https://github.com/w3c/webcomponents/issues/654) but there is no clear solution to the problem. Avoiding attributes entirely (except when a developer explicitly sets one using `ref`) may sidestep this issue until the browsers come up with a better solution.\r\n\r\n#### Takes advantage of custom element \"upgrade\"\r\n\r\nCustom elements can be lazily [upgraded](https://developers.google.com/web/fundamentals/web-components/customelements#upgrades) on the page and some PRPL patterns rely on this technique. During the upgrade process, a custom element can access the properties passed to it by React—even if those properties were set before the definition loaded—and use them to render initial state.\r\n\r\n#### Custom elements treated like any other React component\r\n\r\nWhen React components pass data to one another they already use properties. This would just make custom elements behave the same way.\r\n\r\n### Cons\r\n\r\n#### Possibly a breaking change\r\n\r\nIf a developer has been hand-authoring vanilla custom elements which only have an attributes API, then they will need to update their code or their app will break. The fix would be to use a `ref` to set the attribute (explained below).\r\n\r\n#### Need ref to set attribute\r\n\r\nBy changing the behavior so properties are preferred, it means developers will need to use a `ref` in order to explicitly set an attribute on a custom element.\r\n\r\n```jsx\r\n<custom-element ref={el => el.setAttribute('my-attr', val)} />\r\n```\r\n\r\nThis is just a reversal of the current behavior where developers need a `ref` in order to set a property. Since developers should rarely need to set attributes on custom elements, this seems like a reasonable trade-off.\r\n\r\n#### Not clear how server-side rendering would work\r\n\r\nIt's not clear how this model would map to server-side rendering custom elements. React could assume that the properties map to similarly named attributes and attempt to set those on the server, but this is far from bulletproof and would possibly require a heuristic for things like camelCased properties -> dash-cased attributes.\r\n\r\n## Option 2: Properties-if-available\r\n\r\nAt runtime React could attempt to detect if a property is present on a custom element. If the property is present React will use it, otherwise it will fallback to setting an attribute. This is the model Preact uses to deal with custom elements.\r\n\r\n**Pseudocode implementation:**\r\n\r\n```js\r\nif (propName in element) {\r\n  element[propName] = value;\r\n} else {\r\n  element.setAttribute(propName.toLowerCase(), value);\r\n}\r\n```\r\n\r\n**Possible steps:**\r\n\r\n* If an element has a defined property, React will use it.\r\n\r\n* If an element has an undefined property, and React is trying to pass it primitive data (string/number/boolean), it will use an attribute.\r\n\r\n    * Alternative: Warn and don’t set.\r\n\r\n* If an element has an undefined property, and React is trying to pass it an object/array it will set it as a property. This is because some-attr=\"[object Object]” is not useful.\r\n\r\n    * Alternative: Warn and don’t set.\r\n\r\n* If the element is being rendered on the server, and React is trying to pass it a string/number/boolean, it will use an attribute.\r\n\r\n* If the element is being rendered on the server, and React is trying to pass it a object/array, it will not do anything.\r\n\r\n### Pros\r\n\r\n#### Non-breaking change\r\n\r\nIt is possible to create a custom element that only uses attributes as its interface. This authoring style is **NOT** encouraged, but it may happen regardless. If a custom element author is relying on this behavior then this change would be non-breaking for them.\r\n\r\n### Cons\r\n\r\n#### Developers need to understand the heuristic\r\n\r\nDevelopers might be confused when React sets an attribute instead of a property depending on how they’ve chosen to load their element.\r\n\r\n#### Falling back to attributes may conflict with future globals\r\n\r\nSebastian [raised a concern](https://github.com/facebook/react/issues/10399#issuecomment-320847065) that using `in` to check for the existence of a property on a custom element might accidentally detect a property on the superclass (HTMLElement).\r\n\r\nThere are also other potential conflicts with global attributes [discussed previously](#avoids-conflict-with-future-global-attributes) in this doc.\r\n\r\n## Option 3: Differentiate properties with a sigil\r\n\r\nReact could continue setting attributes on custom elements, but provide a sigil that developers could use to explicitly set properties instead. This is similar to [the approach used by Glimmer.js](https://www.emberjs.com/blog/2017/10/10/glimmer-progress-report.html#toc_component-attributes).\r\n\r\n**Glimmer example:**\r\n\r\n```html\r\n<custom-img @src=\"corgi.jpg\" @hiResSrc=\"corgi@2x.jpg\" width=\"100%\">\r\n```\r\n\r\nIn the above example, the @ sigil indicates that `src` and `hiResSrc` should pass data to the custom element using properties, and `width` should be serialized to an attribute string.\r\n\r\nBecause React components already pass data to one another using properties, there would be no need for them to use the sigil (although it would work if they did, it would just be redundant). Instead, it would primarily be used as an explicit instruction to pass data to a custom element using JavaScript properties.\r\n\r\n*h/t to @developit of Preact for suggesting this approach :)*\r\n\r\n### Pros\r\n\r\n#### Non-breaking change that developers can opt-in to\r\n\r\nAll pre-existing React + custom element apps would continue to work exactly as they have. Developers could choose if they wanted to update their code to use the new sigil style.\r\n\r\n#### Similar to how other libraries handle attributes/properties\r\n\r\nSimilar to Glimmer, both Angular and Vue use modifiers to differentiate between attributes and properties.\r\n\r\n**Vue example:**\r\n\r\n```html\r\n<!-- Vue will serialize `foo` to an attribute string, and set `squid` using a JavaScript property -->\r\n<custom-element :foo=\"bar” :squid.prop=”ink”>\r\n```\r\n\r\n**Angular example:**\r\n\r\n```html\r\n<!-- Angular will serialize `foo` to an attribute string, and set `squid` using a JavaScript property -->\r\n<custom-element [attr.foo]=\"bar” [squid]=”ink”>\r\n```\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React exactly what they want instead of relying on a heuristic like the [properties-if-available](#option-2--properties-if-available) approach.\r\n\r\n### Cons\r\n\r\n#### It’s new syntax\r\n\r\nDevelopers need to be taught how to use it and it needs to be thoroughly tested to make sure it is backwards compatible.\r\n\r\n#### Not clear how server-side rendering would work\r\n\r\nShould the sigil switch to using a similarly named attribute?\r\n\r\n## Option 4: Add an attributes object\r\n\r\nReact could add additional syntax which lets authors explicitly pass data as attributes. If developers do not use this attributes object, then their data will be passed using JavaScript properties.\r\n\r\n**Example:**\r\n\r\n```jsx\r\nconst bar = 'baz';\r\nconst hello = 'World';\r\nconst width = '100%';\r\nconst ReactElement = <Test\r\n  foo={bar} // uses JavaScript property\r\n  attrs={{ hello, width }} // serialized to attributes\r\n/>;\r\n```\r\n\r\nThis idea was [originally proposed](https://gist.github.com/treshugart/2fb509a8828adf7fee5245bfa2a54ba7) by @treshugart, author of Skate.js, and is implemented in the [val](https://github.com/skatejs/val) library.\r\n\r\n### Pros\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React exactly what they want instead of relying on a heuristic like the [properties-if-available](#option-2--properties-if-available) approach.\r\n\r\n#### Extending syntax may also solve issues with event handling\r\n\r\n*Note: This is outside the scope of this document but maybe worth mentioning :)*\r\n\r\nIssue [#7901](https://github.com/facebook/react/issues/7901) requests that React bypass its synthetic event system when declarative event handlers are added to custom elements. Because custom element event names are arbitrary strings, it means they can be capitalized in any fashion. To bypass the synthetic event system today will also mean needing to come up with a heuristic for mapping event names from JSX to `addEventListener`.\r\n\r\n```js\r\n// should this listen for: 'foobar', 'FooBar', or 'fooBar'?\r\nonFooBar={handleFooBar}\r\n```\r\n\r\nHowever, if the syntax is extended to allow attributes it could also be extended to allow events as well:\r\n\r\n```js\r\nconst bar = 'baz';\r\nconst hello = 'World';\r\nconst SquidChanged = e => console.log('yo');\r\nconst ReactElement = <Test\r\n  foo={bar}\r\n  attrs={{ hello }}\r\n  events={{ SquidChanged}} // addEventListener('SquidChanged', …)\r\n/>;\r\n```\r\n\r\nIn this model the variable name is used as the event name. No heuristic is needed.\r\n\r\n### Cons\r\n\r\n#### It’s new syntax\r\n\r\nDevelopers need to be taught how to use it and it needs to be thoroughly tested to make sure it is backwards compatible.\r\n\r\n#### It may be a breaking change\r\n\r\nIf any components already rely on properties named `attrs` or `events`, it could break them.\r\n\r\n#### It may be a larger change than any of the previous proposals\r\n\r\nFor React 17 it may be easier to make an incremental change (like one of the previous proposals) and position this proposal as something to take under consideration for a later, bigger refactor.\r\n\r\n## Option 5: An API for consuming custom elements\r\n\r\n*This proposal was offered by @sophiebits and @gaearon from the React team*\r\n\r\nReact could create a new API for consuming custom elements that maps the element’s behavior with a configuration object.\r\n\r\n**Pseudocode example:**\r\n\r\n```js\r\nconst XFoo = ReactDOM.createCustomElementType({\r\n  element: ‘x-foo’,\r\n  ‘my-attr’: // something that tells React what to do with it\r\n  someRichDataProp: // something that tells React what to do with it\r\n});\r\n```\r\n\r\nThe above code returns a proxy component, `XFoo` that knows how to pass data to a custom element depending on the configuration you provide. You would use this proxy component in your app instead of using the custom element directly.\r\n\r\n**Example usage:**\r\n\r\n```jsx\r\n<XFoo someRichDataProp={...} />\r\n```\r\n\r\n### Pros\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React the exact behavior they want.\r\n\r\n#### Non-breaking change\r\n\r\nDevelopers can opt-in to using the object or continue using the current system.\r\n\r\n#### Idiomatic to React\r\n\r\nThis change doesn’t require new JSX syntax, and feels more like other APIs in React. For example, PropTypes (even though it’s being moved into its own package) has a somewhat similar approach.\r\n\r\n### Cons\r\n\r\n#### Could be a lot of work for a complex component\r\n\r\nPolymer’s [paper-input](https://www.webcomponents.org/element/PolymerElements/paper-input/elements/paper-input) element has 37 properties, so it would produce a very large config. If developers are using a lot of custom elements in their app, that may equal a lot of configs they need to write.\r\n\r\n#### May bloat bundle size\r\n\r\nRelated to the above point, each custom element class now incurs the cost of its definition + its config object size.\r\n\r\n*Note: I'm not 100% sure if this is true. Someone more familiar with the React build process could verify.*\r\n\r\n#### Config needs to keep pace with the component\r\n\r\nEvery time the component does a minor version revision that adds a new property, the config will need to be updated as well. That’s not difficult, but it does add maintenance. Maybe if configs are generated from source this is less of a burden, but that may mean needing to create a new tool to generate configs for each web component library.\r\n\r\n\r\ncc @sebmarkbage @gaearon @developit @treshugart @justinfagnani"
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11346",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11346/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11346/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11346/events",
        "html_url": "https://github.com/facebook/react/pull/11346",
        "id": 267887912,
        "number": 11346,
        "title": "API for prerendering a top-level update and deferring the commit",
        "user": {
            "login": "acdlite",
            "id": 3624098,
            "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/acdlite",
            "html_url": "https://github.com/acdlite",
            "followers_url": "https://api.github.com/users/acdlite/followers",
            "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
            "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
            "organizations_url": "https://api.github.com/users/acdlite/orgs",
            "repos_url": "https://api.github.com/users/acdlite/repos",
            "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
            "received_events_url": "https://api.github.com/users/acdlite/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 196858374,
                "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
                "name": "CLA Signed",
                "color": "e7e7e7",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2017-10-24T03:46:00Z",
        "updated_at": "2017-10-31T00:32:05Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "pull_request": {
            "url": "https://api.github.com/repos/facebook/react/pulls/11346",
            "html_url": "https://github.com/facebook/react/pull/11346",
            "diff_url": "https://github.com/facebook/react/pull/11346.diff",
            "patch_url": "https://github.com/facebook/react/pull/11346.patch"
        },
        "body": "Adds the ability to start rendering work without flushing the changes\r\nto the screen, by blocking the commit phase. This can be used to\r\ncoordinate React's commit phase with other async work.\r\n\r\n- `root.prerender` schedules an update and returns a work object.\r\n- `work.then` schedules a completion callback that fires once the work completes.\r\n- `work.commit` unblocks the commit phase and flushes the remaining\r\n  work synchronously.\r\n\r\n(Lazy roots that start rendering before the DOM container is available are not yet implemented; I'll do that in a subsequent PR.)\r\n\r\n`root.render` and `root.unmount` were updated to also return work objects. In those cases, since the commit phase is not deferred, by the time the `then` callback is fired, the work has already committed."
    },
    {
        "url": "https://api.github.com/repos/facebook/react/issues/11344",
        "repository_url": "https://api.github.com/repos/facebook/react",
        "labels_url": "https://api.github.com/repos/facebook/react/issues/11344/labels{/name}",
        "comments_url": "https://api.github.com/repos/facebook/react/issues/11344/comments",
        "events_url": "https://api.github.com/repos/facebook/react/issues/11344/events",
        "html_url": "https://github.com/facebook/react/issues/11344",
        "id": 267852231,
        "number": 11344,
        "title": "Unexpected rerenders while in production enviroment",
        "user": {
            "login": "jdrzejb",
            "id": 1757436,
            "avatar_url": "https://avatars1.githubusercontent.com/u/1757436?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jdrzejb",
            "html_url": "https://github.com/jdrzejb",
            "followers_url": "https://api.github.com/users/jdrzejb/followers",
            "following_url": "https://api.github.com/users/jdrzejb/following{/other_user}",
            "gists_url": "https://api.github.com/users/jdrzejb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jdrzejb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jdrzejb/subscriptions",
            "organizations_url": "https://api.github.com/users/jdrzejb/orgs",
            "repos_url": "https://api.github.com/users/jdrzejb/repos",
            "events_url": "https://api.github.com/users/jdrzejb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jdrzejb/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 710722093,
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
                "name": "Type: Needs Investigation",
                "color": "fbca04",
                "default": false
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2017-10-23T23:46:43Z",
        "updated_at": "2017-10-24T20:42:34Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nreport a bug\r\n\r\n**What is the current behavior?**\r\nReact is making unexpected rerenders when used along `react-router-dom` and `react-css-modules`. This happens only while in production enviroment. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nhttps://github.com/jdrzejb/react-rerender-bug \r\n\r\nApplication running in development mode is setting key prop properly, thus not making rerenders between route calls inside component.\r\nApp in production mode is appending new value to existing key resulting in rerender and this:\r\nhttps://imgur.com/a/BHp8w \r\n\r\n**What is the expected behavior?**\r\n\r\nApplication in production mode should be setting proper key value and not rerendering.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI don't believe that this is browser problem. I had the same issue with Safari 11.0 and Chrome 62.\r\nI have tested it with React 15.6.2 and React 16.0.0\r\n\r\n\r\nI have tried to isolate this issue as much I could. If I can help you any further please let me know. "
    }
]